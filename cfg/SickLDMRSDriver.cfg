#! /usr/bin/env python
#
# Copyright (C) 2015, DFKI GmbH
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the University of Osnabrueck nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#  Created on: 24.12.2015
#
#      Author: Martin Guenther <martin.guenther@dfki.de>

PACKAGE='sick_ldmrs_driver'
from dynamic_reconfigure.parameter_generator_catkin import *

from math import pi

from driver_base.msg import SensorLevels

gen = ParameterGenerator()

deg2rad = pi / 180
tics2rad = deg2rad / 32

scan_freq_enum = gen.enum([gen.const("ScanFreq1250", int_t, 0, "Scan frequency 12.5 Hz"),
                           gen.const("ScanFreq2500", int_t, 1, "Scan frequency 25.0 Hz"),
                           gen.const("ScanFreq5000", int_t, 2, "Scan frequency 50.0 Hz")],
                          "Available scan frequencies")

# pg. 37 in BALaserView
# TODO: angular_resolution_type (constant, focused)
# ignore_near_range (ignore near range in upper 4 layer)
# layer_range_reduction (Full Range, ??, ??)
# measurement_options (near range clutter removal)
# noise_control (bool)
# upside_down (bool)

#       Name              Type      Reconfiguration level             Description                                                                      Default    Min   Max
gen.add("start_angle",    double_t, SensorLevels.RECONFIGURE_RUNNING, "The angle of the first range measurement [rad].",                              1600 * tics2rad, -1918 * tics2rad, 1600 * tics2rad)   # 50  deg
gen.add("end_angle",      double_t, SensorLevels.RECONFIGURE_RUNNING, "The angle of the last range measurement [rad].",                              -1920 * tics2rad, -1920 * tics2rad, 1598 * tics2rad)   # -60 deg
#gen.add("sync_angle_offset",     int_t,   SensorLevels.RECONFIGURE_STOP,    "Sychronization offset angle in degrees",                                           0,         -180,    179)
#gen.add("intensity",      bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Whether or not the TiM3xx returns intensity values.",                        True)
#gen.add("skip",           int_t,    SensorLevels.RECONFIGURE_RUNNING, "The number of scans to skip between each measured scan.",                    0,         0,    9)
gen.add("frame_id",       str_t,    SensorLevels.RECONFIGURE_RUNNING, "The TF frame in which point clouds will be returned.",                        "ldmrs")
gen.add("scan_frequency",        int_t,   SensorLevels.RECONFIGURE_STOP,    "Scan frequency, 0 = 12.5Hz, 1 = 25 Hz, 2 = 50 Hz",                             2,         0,   2, edit_method=scan_freq_enum)
#gen.add("constant_angular_res",  bool_t,      SensorLevels.RECONFIGURE_STOP,    "Constant or focussed angular resolution type (focussed valid for 12.5Hz scan freq only)",      True)
#gen.add("use_first_echo",        bool_t,     SensorLevels.RECONFIGURE_CLOSE,   "Scan messages will use first echo if true, last echo otherwise",                    False)
#gen.add("time_smoothing_factor",   double_t,     SensorLevels.RECONFIGURE_CLOSE,   "high values will smooth time more, low values will track noisy time more",      0.97,      0.0,    1.0)
#gen.add("time_error_threshold",  int_t,     SensorLevels.RECONFIGURE_CLOSE,   "allowed error (miliseconds) between smooth time and noisy time before step correction is applied, -1 disables time correction",  10,  -1,  500)
#gen.add("apply_changes",         bool_t,     SensorLevels.RECONFIGURE_CLOSE,   "Issues a restart with the new parameter value. Note: none of the changes will take effect until this is set",  False)

# host ip address  192.168.0.1, subnet mask 255.255.255.0, port 12002


exit(gen.generate(PACKAGE, "sick_ldmrs800001s01", "SickLDMRSDriver"))
