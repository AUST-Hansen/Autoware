#! /usr/bin/env python
#
# Copyright (C) 2015, DFKI GmbH
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the University of Osnabrueck nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#  Created on: 24.12.2015
#
#      Author: Martin Guenther <martin.guenther@dfki.de>

PACKAGE='sick_ldmrs_driver'
from dynamic_reconfigure.parameter_generator_catkin import *

from math import pi

from driver_base.msg import SensorLevels

gen = ParameterGenerator()

deg2rad = pi / 180
tics2rad = deg2rad / 32

scan_freq_enum = gen.enum([gen.const("ScanFreq1250", int_t, 0, "Scan frequency 12.5 Hz"),
                           gen.const("ScanFreq2500", int_t, 1, "Scan frequency 25.0 Hz"),
                           gen.const("ScanFreq5000", int_t, 2, "Scan frequency 50.0 Hz")],
                          "Available scan frequencies")

contour_enum = gen.enum([gen.const("ClosestPointOnly", int_t, 0, "Closest point only"),
                         gen.const("LowDensity",       int_t, 1, "Low density"),
                         gen.const("HighDensity",      int_t, 2, "High density")],
                         "Contour point density")

angular_res_enum = gen.enum([gen.const("FocusedRes",  int_t, 0, "Focused resolution"),
                             gen.const("ConstantRes", int_t, 1, "Constant resolution"),
                             gen.const("FlexRes",     int_t, 2, "Flexible resolution")],
                             "Angular resolution type")

range_reduction_enum = gen.enum([gen.const("RangeFull",         int_t, 0, "All layers full range"),
                                 gen.const("RangeLowerReduced", int_t, 1, "Lower 4 layers reduced range"),
                                 gen.const("RangeUpperReduced", int_t, 2, "Upper 4 layers reduced range"),
                                 gen.const("RangeAllReduced",   int_t, 3, "All 8 layers reduced range")],
                                 "Layer range reduction")


######  Name                     Type      Reconfiguration level             Description                                                                      Default    Min   Max

## ROS parameters
gen.add("frame_id",              str_t,    SensorLevels.RECONFIGURE_RUNNING, "The TF frame in which point clouds will be returned.",                         "ldmrs")

## Measurement parameters
gen.add("start_angle",           double_t, SensorLevels.RECONFIGURE_RUNNING, "The angle of the first range measurement [rad].",                              1600 * tics2rad, -1918 * tics2rad, 1600 * tics2rad)   # 50  deg
gen.add("end_angle",             double_t, SensorLevels.RECONFIGURE_RUNNING, "The angle of the last range measurement [rad].",                              -1920 * tics2rad, -1920 * tics2rad, 1598 * tics2rad)   # -60 deg
gen.add("scan_frequency",        int_t,    SensorLevels.RECONFIGURE_RUNNING, "Scan frequency, 0 = 12.5Hz, 1 = 25 Hz, 2 = 50 Hz",                             2,                0,               2, edit_method=scan_freq_enum)
gen.add("sync_angle_offset",     double_t, SensorLevels.RECONFIGURE_RUNNING, "Angle under which the LD-MRS measures at the time of the sync pulse [rad].",   0,               -5760 * tics2rad, 5759 * tics2rad)   # -180...179.96 deg
gen.add("angular_resolution_type", int_t,  SensorLevels.RECONFIGURE_RUNNING, "Angular resolution type: 0 = focused, 1 = constant, 2 = flexible",             1,                0,               2, edit_method=angular_res_enum)
gen.add("layer_range_reduction", int_t,    SensorLevels.RECONFIGURE_RUNNING, "0: Full range, 1: lower 4 reduced, 2: upper 4 reduced, 3: all reduced",        0,                0,               3, edit_method=range_reduction_enum)
# TODO: ignore_near_range (bool, default = false): "Ignore scan points in near range up to 15m if lower 4 layers have reduced range and upper 4 layers have full range."
# TODO: near_range_clutter_removal (bool, default = true)
# TODO: sensitivity_control (bool, default=false): "Reduce the sensitivity automatically in case of extraneous light."
# TODO: FlexRes parameters (num sectors)


## Object tracking parameters
gen.add("contour_point_density", int_t,    SensorLevels.RECONFIGURE_RUNNING, "Contour point density, 0: closest point only, 1: low density, 2: high density", 2,               0,               2, edit_method=contour_enum)
gen.add("min_object_age",        int_t,    SensorLevels.RECONFIGURE_RUNNING, "Minimum tracking age (number of scans) of an object to be transmitted.",        0,               0,               65535)
gen.add("max_prediction_age",    int_t,    SensorLevels.RECONFIGURE_RUNNING, "Maximum prediction age (number of scans) of an object to be transmitted.",      0,               0,               65535)

## TCP/IP parameters
# These parameters are for *setting* the IP address that the scanner is listening on. Not supported by this driver to avoid accidentally making the scanner unaccessible.
# unsupported: ip address   (192.168.0.1)
# unsupported: port         (12002)
# unsupported: subnet mask  (255.255.255.0)
# unsupported: std gateway  (0.0.0.0)

gen.add("apply_changes",         bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Issues a restart with the new parameter values. Note: none of the changes will take effect until this is set",  False)

## unused parameters from CSIRO sick_ldmrs driver
#gen.add("use_first_echo",        bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Scan messages will use first echo if true, last echo otherwise",               False)
#gen.add("time_smoothing_factor", double_t, SensorLevels.RECONFIGURE_RUNNING, "high values will smooth time more, low values will track noisy time more",     0.97,             0.0,             1.0)
#gen.add("time_error_threshold",  int_t,    SensorLevels.RECONFIGURE_RUNNING, "allowed error (miliseconds) between smooth time and noisy time before step correction is applied, -1 disables time correction",  10,  -1,  500)

exit(gen.generate(PACKAGE, "sick_ldmrs800001s01", "SickLDMRSDriver"))
